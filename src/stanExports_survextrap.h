// Generated by rstantools.  Do not edit by hand.

/*
    survextrap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    survextrap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with survextrap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_survextrap_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_survextrap");
    reader.add_event(300, 298, "end", "model_survextrap");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
mspline_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 14;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(stan::math::log(multiply(basis, coefs)), eta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mspline_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) const {
        return mspline_log_haz(eta, basis, coefs, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
mspline_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 26;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> res(rows(eta));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 27;
        stan::math::assign(res, elt_multiply(minus(multiply(ibasis, coefs)), stan::math::exp(eta)));
        current_statement_begin__ = 28;
        if (as_bool(logical_gt(stan::math::exp(get_base1(res, 1, "res", 1)), 1))) {
            current_statement_begin__ = 29;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Probability > 1 computed. Not your fault - report a bug to the developer.";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mspline_log_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) const {
        return mspline_log_surv(eta, ibasis, coefs, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
mspline_log_dens(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 35;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> res(rows(eta));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 37;
        stan::math::assign(res, add(mspline_log_haz(eta, basis, coefs, pstream__), mspline_log_surv(eta, ibasis, coefs, pstream__)));
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mspline_log_dens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& coefs, std::ostream* pstream__) const {
        return mspline_log_dens(eta, basis, ibasis, coefs, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type, Eigen::Dynamic, 1>
log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
             const int& cure,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
             const int& modelid, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> res(rows(eta));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 45;
        validate_non_negative_index("base_logsurv", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> base_logsurv(rows(eta));
        stan::math::initialize(base_logsurv, DUMMY_VAR__);
        stan::math::fill(base_logsurv, DUMMY_VAR__);
        current_statement_begin__ = 46;
        if (as_bool(logical_eq(modelid, 1))) {
            current_statement_begin__ = 47;
            stan::math::assign(base_logsurv, mspline_log_surv(eta, ibasis, coefs, pstream__));
        } else if (as_bool(logical_eq(modelid, 2))) {
            current_statement_begin__ = 49;
            for (int i = 1; i <= rows(eta); ++i) {
                current_statement_begin__ = 50;
                stan::model::assign(base_logsurv, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            weibull_ccdf_log(get_base1(ibasis, i, 1, "ibasis", 1), get_base1(coefs, 1, "coefs", 1), stan::math::exp(get_base1(eta, i, "eta", 1))), 
                            "assigning variable base_logsurv");
            }
        }
        current_statement_begin__ = 53;
        if (as_bool(cure)) {
            current_statement_begin__ = 54;
            for (int i = 1; i <= rows(eta); ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((get_base1(pcure, i, "pcure", 1) + ((1 - get_base1(pcure, i, "pcure", 1)) * stan::math::exp(get_base1(base_logsurv, i, "base_logsurv", 1))))), 
                            "assigning variable res");
            }
        } else {
            current_statement_begin__ = 58;
            stan::math::assign(res, base_logsurv);
        }
        current_statement_begin__ = 60;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct log_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
             const int& cure,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
             const int& modelid, std::ostream* pstream__) const {
        return log_surv(eta, ibasis, coefs, cure, pcure, modelid, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
            const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
            const int& cure,
            const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
            const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
            const int& modelid, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 66;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> res(rows(eta));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 67;
        validate_non_negative_index("base_logdens", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> base_logdens(rows(eta));
        stan::math::initialize(base_logdens, DUMMY_VAR__);
        stan::math::fill(base_logdens, DUMMY_VAR__);
        current_statement_begin__ = 68;
        validate_non_negative_index("base_loghaz", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> base_loghaz(rows(eta));
        stan::math::initialize(base_loghaz, DUMMY_VAR__);
        stan::math::fill(base_loghaz, DUMMY_VAR__);
        current_statement_begin__ = 69;
        validate_non_negative_index("base_logsurv", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> base_logsurv(rows(eta));
        stan::math::initialize(base_logsurv, DUMMY_VAR__);
        stan::math::fill(base_logsurv, DUMMY_VAR__);
        current_statement_begin__ = 70;
        if (as_bool(cure)) {
            current_statement_begin__ = 71;
            if (as_bool(logical_eq(modelid, 1))) {
                current_statement_begin__ = 72;
                stan::math::assign(base_logdens, mspline_log_dens(eta, basis, ibasis, coefs, pstream__));
            } else {
                current_statement_begin__ = 74;
                for (int i = 1; i <= rows(eta); ++i) {
                    current_statement_begin__ = 75;
                    stan::model::assign(base_logdens, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                weibull_log(get_base1(basis, i, 1, "basis", 1), get_base1(coefs, 1, "coefs", 1), stan::math::exp(get_base1(eta, i, "eta", 1))), 
                                "assigning variable base_logdens");
                }
            }
            current_statement_begin__ = 78;
            stan::math::assign(base_logsurv, log_surv(eta, ibasis, coefs, cure, pcure, modelid, pstream__));
            current_statement_begin__ = 79;
            for (int i = 1; i <= rows(eta); ++i) {
                current_statement_begin__ = 80;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((stan::math::log((1 - get_base1(pcure, i, "pcure", 1))) + get_base1(base_logdens, i, "base_logdens", 1)) - get_base1(base_logsurv, i, "base_logsurv", 1)), 
                            "assigning variable res");
            }
        } else {
            current_statement_begin__ = 83;
            if (as_bool(logical_eq(modelid, 1))) {
                current_statement_begin__ = 84;
                stan::math::assign(base_loghaz, mspline_log_haz(eta, basis, coefs, pstream__));
            } else {
                current_statement_begin__ = 86;
                for (int i = 1; i <= rows(eta); ++i) {
                    current_statement_begin__ = 87;
                    stan::model::assign(base_loghaz, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (weibull_log(get_base1(basis, i, 1, "basis", 1), get_base1(coefs, 1, "coefs", 1), stan::math::exp(get_base1(eta, i, "eta", 1))) - weibull_ccdf_log(get_base1(ibasis, i, 1, "ibasis", 1), get_base1(coefs, 1, "coefs", 1), stan::math::exp(get_base1(eta, i, "eta", 1)))), 
                                "assigning variable base_loghaz");
                }
            }
            current_statement_begin__ = 91;
            stan::math::assign(res, base_loghaz);
        }
        current_statement_begin__ = 93;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
            const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
            const int& cure,
            const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
            const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
            const int& modelid, std::ostream* pstream__) const {
        return log_haz(eta, basis, coefs, cure, pcure, ibasis, modelid, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
log_dens(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
             const int& cure,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
             const int& modelid, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 99;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> res(rows(eta));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 100;
        stan::math::assign(res, add(log_haz(eta, basis, coefs, cure, pcure, ibasis, modelid, pstream__), log_surv(eta, ibasis, coefs, cure, pcure, modelid, pstream__)));
        current_statement_begin__ = 102;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct log_dens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& basis,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& coefs,
             const int& cure,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& pcure,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& ibasis,
             const int& modelid, std::ostream* pstream__) const {
        return log_dens(eta, basis, coefs, cure, pcure, ibasis, modelid, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
loghaz_lp(const T0__& gamma,
              const int& dist,
              const T2__& location,
              const T3__& scale,
              const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 116;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 117;
            lp_accum__.add(normal_log(gamma, location, scale));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 119;
            lp_accum__.add(student_t_log(gamma, df, location, scale));
        }
        current_statement_begin__ = 121;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loghaz_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
    operator()(const T0__& gamma,
              const int& dist,
              const T2__& location,
              const T3__& scale,
              const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return loghaz_lp(gamma, dist, location, scale, df, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
loghr_lp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& loghr,
             const std::vector<int>& dist,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& location,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& scale,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 125;
        for (int i = 1; i <= rows(loghr); ++i) {
            current_statement_begin__ = 126;
            if (as_bool(logical_eq(get_base1(dist, i, "dist", 1), 1))) {
                current_statement_begin__ = 127;
                lp_accum__.add(normal_log(get_base1(loghr, i, "loghr", 1), get_base1(location, i, "location", 1), get_base1(scale, i, "scale", 1)));
            } else if (as_bool(logical_eq(get_base1(dist, i, "dist", 1), 2))) {
                current_statement_begin__ = 129;
                lp_accum__.add(student_t_log(get_base1(loghr, i, "loghr", 1), get_base1(df, i, "df", 1), get_base1(location, i, "location", 1), get_base1(scale, i, "scale", 1)));
            }
        }
        current_statement_begin__ = 132;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loghr_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& loghr,
             const std::vector<int>& dist,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& location,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& scale,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return loghr_lp(loghr, dist, location, scale, df, lp__, lp_accum__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_survextrap
  : public stan::model::model_base_crtp<model_survextrap> {
private:
        int nevent;
        int nrcens;
        int nvars;
        int nextern;
        int ncovs;
        int ncurecovs;
        double log_crude_event_rate;
        matrix_d basis_event;
        matrix_d ibasis_event;
        matrix_d ibasis_rcens;
        matrix_d ibasis_ext_stop;
        matrix_d ibasis_ext_start;
        matrix_d x_event;
        matrix_d x_rcens;
        matrix_d xcure_event;
        matrix_d xcure_rcens;
        std::vector<int> r_ext;
        std::vector<int> n_ext;
        matrix_d x_ext;
        matrix_d xcure_ext;
        vector_d beta_mean;
        int est_smooth;
        vector_d smooth_sd_fixed;
        int cure;
        int prior_loghaz_dist;
        vector_d prior_loghaz;
        vector_d prior_cure;
        vector_d prior_smooth;
        std::vector<int> prior_loghr_dist;
        vector_d prior_loghr_location;
        vector_d prior_loghr_scale;
        vector_d prior_loghr_df;
        std::vector<int> prior_logor_cure_dist;
        vector_d prior_logor_cure_location;
        vector_d prior_logor_cure_scale;
        vector_d prior_logor_cure_df;
        int modelid;
public:
    model_survextrap(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_survextrap(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_survextrap_namespace::model_survextrap";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 138;
            context__.validate_dims("data initialization", "nevent", "int", context__.to_vec());
            nevent = int(0);
            vals_i__ = context__.vals_i("nevent");
            pos__ = 0;
            nevent = vals_i__[pos__++];
            check_greater_or_equal(function__, "nevent", nevent, 0);
            current_statement_begin__ = 139;
            context__.validate_dims("data initialization", "nrcens", "int", context__.to_vec());
            nrcens = int(0);
            vals_i__ = context__.vals_i("nrcens");
            pos__ = 0;
            nrcens = vals_i__[pos__++];
            check_greater_or_equal(function__, "nrcens", nrcens, 0);
            current_statement_begin__ = 140;
            context__.validate_dims("data initialization", "nvars", "int", context__.to_vec());
            nvars = int(0);
            vals_i__ = context__.vals_i("nvars");
            pos__ = 0;
            nvars = vals_i__[pos__++];
            check_greater_or_equal(function__, "nvars", nvars, 0);
            current_statement_begin__ = 141;
            context__.validate_dims("data initialization", "nextern", "int", context__.to_vec());
            nextern = int(0);
            vals_i__ = context__.vals_i("nextern");
            pos__ = 0;
            nextern = vals_i__[pos__++];
            check_greater_or_equal(function__, "nextern", nextern, 0);
            current_statement_begin__ = 142;
            context__.validate_dims("data initialization", "ncovs", "int", context__.to_vec());
            ncovs = int(0);
            vals_i__ = context__.vals_i("ncovs");
            pos__ = 0;
            ncovs = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncovs", ncovs, 0);
            current_statement_begin__ = 143;
            context__.validate_dims("data initialization", "ncurecovs", "int", context__.to_vec());
            ncurecovs = int(0);
            vals_i__ = context__.vals_i("ncurecovs");
            pos__ = 0;
            ncurecovs = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncurecovs", ncurecovs, 0);
            current_statement_begin__ = 146;
            context__.validate_dims("data initialization", "log_crude_event_rate", "double", context__.to_vec());
            log_crude_event_rate = double(0);
            vals_r__ = context__.vals_r("log_crude_event_rate");
            pos__ = 0;
            log_crude_event_rate = vals_r__[pos__++];
            current_statement_begin__ = 149;
            validate_non_negative_index("basis_event", "nevent", nevent);
            validate_non_negative_index("basis_event", "nvars", nvars);
            context__.validate_dims("data initialization", "basis_event", "matrix_d", context__.to_vec(nevent,nvars));
            basis_event = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nevent, nvars);
            vals_r__ = context__.vals_r("basis_event");
            pos__ = 0;
            size_t basis_event_j_2_max__ = nvars;
            size_t basis_event_j_1_max__ = nevent;
            for (size_t j_2__ = 0; j_2__ < basis_event_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < basis_event_j_1_max__; ++j_1__) {
                    basis_event(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 150;
            validate_non_negative_index("ibasis_event", "nevent", nevent);
            validate_non_negative_index("ibasis_event", "nvars", nvars);
            context__.validate_dims("data initialization", "ibasis_event", "matrix_d", context__.to_vec(nevent,nvars));
            ibasis_event = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nevent, nvars);
            vals_r__ = context__.vals_r("ibasis_event");
            pos__ = 0;
            size_t ibasis_event_j_2_max__ = nvars;
            size_t ibasis_event_j_1_max__ = nevent;
            for (size_t j_2__ = 0; j_2__ < ibasis_event_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ibasis_event_j_1_max__; ++j_1__) {
                    ibasis_event(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 151;
            validate_non_negative_index("ibasis_rcens", "nrcens", nrcens);
            validate_non_negative_index("ibasis_rcens", "nvars", nvars);
            context__.validate_dims("data initialization", "ibasis_rcens", "matrix_d", context__.to_vec(nrcens,nvars));
            ibasis_rcens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nrcens, nvars);
            vals_r__ = context__.vals_r("ibasis_rcens");
            pos__ = 0;
            size_t ibasis_rcens_j_2_max__ = nvars;
            size_t ibasis_rcens_j_1_max__ = nrcens;
            for (size_t j_2__ = 0; j_2__ < ibasis_rcens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ibasis_rcens_j_1_max__; ++j_1__) {
                    ibasis_rcens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 152;
            validate_non_negative_index("ibasis_ext_stop", "nextern", nextern);
            validate_non_negative_index("ibasis_ext_stop", "nvars", nvars);
            context__.validate_dims("data initialization", "ibasis_ext_stop", "matrix_d", context__.to_vec(nextern,nvars));
            ibasis_ext_stop = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nextern, nvars);
            vals_r__ = context__.vals_r("ibasis_ext_stop");
            pos__ = 0;
            size_t ibasis_ext_stop_j_2_max__ = nvars;
            size_t ibasis_ext_stop_j_1_max__ = nextern;
            for (size_t j_2__ = 0; j_2__ < ibasis_ext_stop_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ibasis_ext_stop_j_1_max__; ++j_1__) {
                    ibasis_ext_stop(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 153;
            validate_non_negative_index("ibasis_ext_start", "nextern", nextern);
            validate_non_negative_index("ibasis_ext_start", "nvars", nvars);
            context__.validate_dims("data initialization", "ibasis_ext_start", "matrix_d", context__.to_vec(nextern,nvars));
            ibasis_ext_start = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nextern, nvars);
            vals_r__ = context__.vals_r("ibasis_ext_start");
            pos__ = 0;
            size_t ibasis_ext_start_j_2_max__ = nvars;
            size_t ibasis_ext_start_j_1_max__ = nextern;
            for (size_t j_2__ = 0; j_2__ < ibasis_ext_start_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ibasis_ext_start_j_1_max__; ++j_1__) {
                    ibasis_ext_start(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 154;
            validate_non_negative_index("x_event", "nevent", nevent);
            validate_non_negative_index("x_event", "ncovs", ncovs);
            context__.validate_dims("data initialization", "x_event", "matrix_d", context__.to_vec(nevent,ncovs));
            x_event = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nevent, ncovs);
            vals_r__ = context__.vals_r("x_event");
            pos__ = 0;
            size_t x_event_j_2_max__ = ncovs;
            size_t x_event_j_1_max__ = nevent;
            for (size_t j_2__ = 0; j_2__ < x_event_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_event_j_1_max__; ++j_1__) {
                    x_event(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 155;
            validate_non_negative_index("x_rcens", "nrcens", nrcens);
            validate_non_negative_index("x_rcens", "ncovs", ncovs);
            context__.validate_dims("data initialization", "x_rcens", "matrix_d", context__.to_vec(nrcens,ncovs));
            x_rcens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nrcens, ncovs);
            vals_r__ = context__.vals_r("x_rcens");
            pos__ = 0;
            size_t x_rcens_j_2_max__ = ncovs;
            size_t x_rcens_j_1_max__ = nrcens;
            for (size_t j_2__ = 0; j_2__ < x_rcens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_rcens_j_1_max__; ++j_1__) {
                    x_rcens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 156;
            validate_non_negative_index("xcure_event", "nevent", nevent);
            validate_non_negative_index("xcure_event", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "xcure_event", "matrix_d", context__.to_vec(nevent,ncurecovs));
            xcure_event = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nevent, ncurecovs);
            vals_r__ = context__.vals_r("xcure_event");
            pos__ = 0;
            size_t xcure_event_j_2_max__ = ncurecovs;
            size_t xcure_event_j_1_max__ = nevent;
            for (size_t j_2__ = 0; j_2__ < xcure_event_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xcure_event_j_1_max__; ++j_1__) {
                    xcure_event(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 157;
            validate_non_negative_index("xcure_rcens", "nrcens", nrcens);
            validate_non_negative_index("xcure_rcens", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "xcure_rcens", "matrix_d", context__.to_vec(nrcens,ncurecovs));
            xcure_rcens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nrcens, ncurecovs);
            vals_r__ = context__.vals_r("xcure_rcens");
            pos__ = 0;
            size_t xcure_rcens_j_2_max__ = ncurecovs;
            size_t xcure_rcens_j_1_max__ = nrcens;
            for (size_t j_2__ = 0; j_2__ < xcure_rcens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xcure_rcens_j_1_max__; ++j_1__) {
                    xcure_rcens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 161;
            validate_non_negative_index("r_ext", "nextern", nextern);
            context__.validate_dims("data initialization", "r_ext", "int", context__.to_vec(nextern));
            r_ext = std::vector<int>(nextern, int(0));
            vals_i__ = context__.vals_i("r_ext");
            pos__ = 0;
            size_t r_ext_k_0_max__ = nextern;
            for (size_t k_0__ = 0; k_0__ < r_ext_k_0_max__; ++k_0__) {
                r_ext[k_0__] = vals_i__[pos__++];
            }
            size_t r_ext_i_0_max__ = nextern;
            for (size_t i_0__ = 0; i_0__ < r_ext_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "r_ext[i_0__]", r_ext[i_0__], 0);
            }
            current_statement_begin__ = 162;
            validate_non_negative_index("n_ext", "nextern", nextern);
            context__.validate_dims("data initialization", "n_ext", "int", context__.to_vec(nextern));
            n_ext = std::vector<int>(nextern, int(0));
            vals_i__ = context__.vals_i("n_ext");
            pos__ = 0;
            size_t n_ext_k_0_max__ = nextern;
            for (size_t k_0__ = 0; k_0__ < n_ext_k_0_max__; ++k_0__) {
                n_ext[k_0__] = vals_i__[pos__++];
            }
            size_t n_ext_i_0_max__ = nextern;
            for (size_t i_0__ = 0; i_0__ < n_ext_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_ext[i_0__]", n_ext[i_0__], 0);
            }
            current_statement_begin__ = 163;
            validate_non_negative_index("x_ext", "nextern", nextern);
            validate_non_negative_index("x_ext", "ncovs", ncovs);
            context__.validate_dims("data initialization", "x_ext", "matrix_d", context__.to_vec(nextern,ncovs));
            x_ext = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nextern, ncovs);
            vals_r__ = context__.vals_r("x_ext");
            pos__ = 0;
            size_t x_ext_j_2_max__ = ncovs;
            size_t x_ext_j_1_max__ = nextern;
            for (size_t j_2__ = 0; j_2__ < x_ext_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_ext_j_1_max__; ++j_1__) {
                    x_ext(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 164;
            validate_non_negative_index("xcure_ext", "nextern", nextern);
            validate_non_negative_index("xcure_ext", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "xcure_ext", "matrix_d", context__.to_vec(nextern,ncurecovs));
            xcure_ext = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nextern, ncurecovs);
            vals_r__ = context__.vals_r("xcure_ext");
            pos__ = 0;
            size_t xcure_ext_j_2_max__ = ncurecovs;
            size_t xcure_ext_j_1_max__ = nextern;
            for (size_t j_2__ = 0; j_2__ < xcure_ext_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xcure_ext_j_1_max__; ++j_1__) {
                    xcure_ext(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 166;
            validate_non_negative_index("beta_mean", "(nvars - 1)", (nvars - 1));
            context__.validate_dims("data initialization", "beta_mean", "vector_d", context__.to_vec((nvars - 1)));
            beta_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>((nvars - 1));
            vals_r__ = context__.vals_r("beta_mean");
            pos__ = 0;
            size_t beta_mean_j_1_max__ = (nvars - 1);
            for (size_t j_1__ = 0; j_1__ < beta_mean_j_1_max__; ++j_1__) {
                beta_mean(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 167;
            context__.validate_dims("data initialization", "est_smooth", "int", context__.to_vec());
            est_smooth = int(0);
            vals_i__ = context__.vals_i("est_smooth");
            pos__ = 0;
            est_smooth = vals_i__[pos__++];
            current_statement_begin__ = 168;
            validate_non_negative_index("smooth_sd_fixed", "(1 - est_smooth)", (1 - est_smooth));
            context__.validate_dims("data initialization", "smooth_sd_fixed", "vector_d", context__.to_vec((1 - est_smooth)));
            smooth_sd_fixed = Eigen::Matrix<double, Eigen::Dynamic, 1>((1 - est_smooth));
            vals_r__ = context__.vals_r("smooth_sd_fixed");
            pos__ = 0;
            size_t smooth_sd_fixed_j_1_max__ = (1 - est_smooth);
            for (size_t j_1__ = 0; j_1__ < smooth_sd_fixed_j_1_max__; ++j_1__) {
                smooth_sd_fixed(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "smooth_sd_fixed", smooth_sd_fixed, 0);
            current_statement_begin__ = 170;
            context__.validate_dims("data initialization", "cure", "int", context__.to_vec());
            cure = int(0);
            vals_i__ = context__.vals_i("cure");
            pos__ = 0;
            cure = vals_i__[pos__++];
            current_statement_begin__ = 171;
            context__.validate_dims("data initialization", "prior_loghaz_dist", "int", context__.to_vec());
            prior_loghaz_dist = int(0);
            vals_i__ = context__.vals_i("prior_loghaz_dist");
            pos__ = 0;
            prior_loghaz_dist = vals_i__[pos__++];
            current_statement_begin__ = 172;
            validate_non_negative_index("prior_loghaz", "3", 3);
            context__.validate_dims("data initialization", "prior_loghaz", "vector_d", context__.to_vec(3));
            prior_loghaz = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("prior_loghaz");
            pos__ = 0;
            size_t prior_loghaz_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < prior_loghaz_j_1_max__; ++j_1__) {
                prior_loghaz(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "prior_loghaz", prior_loghaz, 0);
            current_statement_begin__ = 173;
            validate_non_negative_index("prior_cure", "2", 2);
            context__.validate_dims("data initialization", "prior_cure", "vector_d", context__.to_vec(2));
            prior_cure = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("prior_cure");
            pos__ = 0;
            size_t prior_cure_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < prior_cure_j_1_max__; ++j_1__) {
                prior_cure(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "prior_cure", prior_cure, 0);
            current_statement_begin__ = 174;
            validate_non_negative_index("prior_smooth", "(2 * est_smooth)", (2 * est_smooth));
            context__.validate_dims("data initialization", "prior_smooth", "vector_d", context__.to_vec((2 * est_smooth)));
            prior_smooth = Eigen::Matrix<double, Eigen::Dynamic, 1>((2 * est_smooth));
            vals_r__ = context__.vals_r("prior_smooth");
            pos__ = 0;
            size_t prior_smooth_j_1_max__ = (2 * est_smooth);
            for (size_t j_1__ = 0; j_1__ < prior_smooth_j_1_max__; ++j_1__) {
                prior_smooth(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "prior_smooth", prior_smooth, 0);
            current_statement_begin__ = 175;
            validate_non_negative_index("prior_loghr_dist", "ncovs", ncovs);
            context__.validate_dims("data initialization", "prior_loghr_dist", "int", context__.to_vec(ncovs));
            prior_loghr_dist = std::vector<int>(ncovs, int(0));
            vals_i__ = context__.vals_i("prior_loghr_dist");
            pos__ = 0;
            size_t prior_loghr_dist_k_0_max__ = ncovs;
            for (size_t k_0__ = 0; k_0__ < prior_loghr_dist_k_0_max__; ++k_0__) {
                prior_loghr_dist[k_0__] = vals_i__[pos__++];
            }
            size_t prior_loghr_dist_i_0_max__ = ncovs;
            for (size_t i_0__ = 0; i_0__ < prior_loghr_dist_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_loghr_dist[i_0__]", prior_loghr_dist[i_0__], 0);
            }
            current_statement_begin__ = 176;
            validate_non_negative_index("prior_loghr_location", "ncovs", ncovs);
            context__.validate_dims("data initialization", "prior_loghr_location", "vector_d", context__.to_vec(ncovs));
            prior_loghr_location = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncovs);
            vals_r__ = context__.vals_r("prior_loghr_location");
            pos__ = 0;
            size_t prior_loghr_location_j_1_max__ = ncovs;
            for (size_t j_1__ = 0; j_1__ < prior_loghr_location_j_1_max__; ++j_1__) {
                prior_loghr_location(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 177;
            validate_non_negative_index("prior_loghr_scale", "ncovs", ncovs);
            context__.validate_dims("data initialization", "prior_loghr_scale", "vector_d", context__.to_vec(ncovs));
            prior_loghr_scale = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncovs);
            vals_r__ = context__.vals_r("prior_loghr_scale");
            pos__ = 0;
            size_t prior_loghr_scale_j_1_max__ = ncovs;
            for (size_t j_1__ = 0; j_1__ < prior_loghr_scale_j_1_max__; ++j_1__) {
                prior_loghr_scale(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 178;
            validate_non_negative_index("prior_loghr_df", "ncovs", ncovs);
            context__.validate_dims("data initialization", "prior_loghr_df", "vector_d", context__.to_vec(ncovs));
            prior_loghr_df = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncovs);
            vals_r__ = context__.vals_r("prior_loghr_df");
            pos__ = 0;
            size_t prior_loghr_df_j_1_max__ = ncovs;
            for (size_t j_1__ = 0; j_1__ < prior_loghr_df_j_1_max__; ++j_1__) {
                prior_loghr_df(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 179;
            validate_non_negative_index("prior_logor_cure_dist", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "prior_logor_cure_dist", "int", context__.to_vec(ncurecovs));
            prior_logor_cure_dist = std::vector<int>(ncurecovs, int(0));
            vals_i__ = context__.vals_i("prior_logor_cure_dist");
            pos__ = 0;
            size_t prior_logor_cure_dist_k_0_max__ = ncurecovs;
            for (size_t k_0__ = 0; k_0__ < prior_logor_cure_dist_k_0_max__; ++k_0__) {
                prior_logor_cure_dist[k_0__] = vals_i__[pos__++];
            }
            size_t prior_logor_cure_dist_i_0_max__ = ncurecovs;
            for (size_t i_0__ = 0; i_0__ < prior_logor_cure_dist_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_logor_cure_dist[i_0__]", prior_logor_cure_dist[i_0__], 0);
            }
            current_statement_begin__ = 180;
            validate_non_negative_index("prior_logor_cure_location", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "prior_logor_cure_location", "vector_d", context__.to_vec(ncurecovs));
            prior_logor_cure_location = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncurecovs);
            vals_r__ = context__.vals_r("prior_logor_cure_location");
            pos__ = 0;
            size_t prior_logor_cure_location_j_1_max__ = ncurecovs;
            for (size_t j_1__ = 0; j_1__ < prior_logor_cure_location_j_1_max__; ++j_1__) {
                prior_logor_cure_location(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 181;
            validate_non_negative_index("prior_logor_cure_scale", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "prior_logor_cure_scale", "vector_d", context__.to_vec(ncurecovs));
            prior_logor_cure_scale = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncurecovs);
            vals_r__ = context__.vals_r("prior_logor_cure_scale");
            pos__ = 0;
            size_t prior_logor_cure_scale_j_1_max__ = ncurecovs;
            for (size_t j_1__ = 0; j_1__ < prior_logor_cure_scale_j_1_max__; ++j_1__) {
                prior_logor_cure_scale(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 182;
            validate_non_negative_index("prior_logor_cure_df", "ncurecovs", ncurecovs);
            context__.validate_dims("data initialization", "prior_logor_cure_df", "vector_d", context__.to_vec(ncurecovs));
            prior_logor_cure_df = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncurecovs);
            vals_r__ = context__.vals_r("prior_logor_cure_df");
            pos__ = 0;
            size_t prior_logor_cure_df_j_1_max__ = ncurecovs;
            for (size_t j_1__ = 0; j_1__ < prior_logor_cure_df_j_1_max__; ++j_1__) {
                prior_logor_cure_df(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 184;
            context__.validate_dims("data initialization", "modelid", "int", context__.to_vec());
            modelid = int(0);
            vals_i__ = context__.vals_i("modelid");
            pos__ = 0;
            modelid = vals_i__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 188;
            validate_non_negative_index("gamma", "1", 1);
            num_params_r__ += (1 * 1);
            current_statement_begin__ = 189;
            validate_non_negative_index("loghr", "ncovs", ncovs);
            num_params_r__ += ncovs;
            current_statement_begin__ = 190;
            validate_non_negative_index("beta_err", "(nvars - 1)", (nvars - 1));
            num_params_r__ += (nvars - 1);
            current_statement_begin__ = 191;
            validate_non_negative_index("smooth_sd", "est_smooth", est_smooth);
            num_params_r__ += est_smooth;
            current_statement_begin__ = 192;
            validate_non_negative_index("pcure", "cure", cure);
            num_params_r__ += cure;
            current_statement_begin__ = 193;
            validate_non_negative_index("logor_cure", "ncurecovs", ncurecovs);
            num_params_r__ += ncurecovs;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_survextrap() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 188;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "1", 1);
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec(1));
        std::vector<double> gamma(1, double(0));
        size_t gamma_k_0_max__ = 1;
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            gamma[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_i_0_max__ = 1;
        for (size_t i_0__ = 0; i_0__ < gamma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(gamma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 189;
        if (!(context__.contains_r("loghr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable loghr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("loghr");
        pos__ = 0U;
        validate_non_negative_index("loghr", "ncovs", ncovs);
        context__.validate_dims("parameter initialization", "loghr", "vector_d", context__.to_vec(ncovs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> loghr(ncovs);
        size_t loghr_j_1_max__ = ncovs;
        for (size_t j_1__ = 0; j_1__ < loghr_j_1_max__; ++j_1__) {
            loghr(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(loghr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable loghr: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 190;
        if (!(context__.contains_r("beta_err")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_err missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_err");
        pos__ = 0U;
        validate_non_negative_index("beta_err", "(nvars - 1)", (nvars - 1));
        context__.validate_dims("parameter initialization", "beta_err", "vector_d", context__.to_vec((nvars - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_err((nvars - 1));
        size_t beta_err_j_1_max__ = (nvars - 1);
        for (size_t j_1__ = 0; j_1__ < beta_err_j_1_max__; ++j_1__) {
            beta_err(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_err);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_err: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 191;
        if (!(context__.contains_r("smooth_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable smooth_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("smooth_sd");
        pos__ = 0U;
        validate_non_negative_index("smooth_sd", "est_smooth", est_smooth);
        context__.validate_dims("parameter initialization", "smooth_sd", "vector_d", context__.to_vec(est_smooth));
        Eigen::Matrix<double, Eigen::Dynamic, 1> smooth_sd(est_smooth);
        size_t smooth_sd_j_1_max__ = est_smooth;
        for (size_t j_1__ = 0; j_1__ < smooth_sd_j_1_max__; ++j_1__) {
            smooth_sd(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, smooth_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable smooth_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 192;
        if (!(context__.contains_r("pcure")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pcure missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pcure");
        pos__ = 0U;
        validate_non_negative_index("pcure", "cure", cure);
        context__.validate_dims("parameter initialization", "pcure", "vector_d", context__.to_vec(cure));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pcure(cure);
        size_t pcure_j_1_max__ = cure;
        for (size_t j_1__ = 0; j_1__ < pcure_j_1_max__; ++j_1__) {
            pcure(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, pcure);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pcure: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 193;
        if (!(context__.contains_r("logor_cure")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logor_cure missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logor_cure");
        pos__ = 0U;
        validate_non_negative_index("logor_cure", "ncurecovs", ncurecovs);
        context__.validate_dims("parameter initialization", "logor_cure", "vector_d", context__.to_vec(ncurecovs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> logor_cure(ncurecovs);
        size_t logor_cure_j_1_max__ = ncurecovs;
        for (size_t j_1__ = 0; j_1__ < logor_cure_j_1_max__; ++j_1__) {
            logor_cure(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(logor_cure);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logor_cure: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 188;
            std::vector<local_scalar_t__> gamma;
            size_t gamma_d_0_max__ = 1;
            gamma.reserve(gamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma.push_back(in__.scalar_constrain(lp__));
                else
                    gamma.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 189;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loghr;
            (void) loghr;  // dummy to suppress unused var warning
            if (jacobian__)
                loghr = in__.vector_constrain(ncovs, lp__);
            else
                loghr = in__.vector_constrain(ncovs);
            current_statement_begin__ = 190;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_err;
            (void) beta_err;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_err = in__.vector_constrain((nvars - 1), lp__);
            else
                beta_err = in__.vector_constrain((nvars - 1));
            current_statement_begin__ = 191;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> smooth_sd;
            (void) smooth_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                smooth_sd = in__.vector_lb_constrain(0, est_smooth, lp__);
            else
                smooth_sd = in__.vector_lb_constrain(0, est_smooth);
            current_statement_begin__ = 192;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pcure;
            (void) pcure;  // dummy to suppress unused var warning
            if (jacobian__)
                pcure = in__.vector_lub_constrain(0, 1, cure, lp__);
            else
                pcure = in__.vector_lub_constrain(0, 1, cure);
            current_statement_begin__ = 193;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logor_cure;
            (void) logor_cure;  // dummy to suppress unused var warning
            if (jacobian__)
                logor_cure = in__.vector_constrain(ncurecovs, lp__);
            else
                logor_cure = in__.vector_constrain(ncurecovs);
            // transformed parameters
            current_statement_begin__ = 198;
            validate_non_negative_index("beta", "nvars", nvars);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(nvars);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("coefs", "nvars", nvars);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> coefs(nvars);
            stan::math::initialize(coefs, DUMMY_VAR__);
            stan::math::fill(coefs, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 201;
            if (as_bool(est_smooth)) {
                current_statement_begin__ = 202;
                stan::math::assign(beta, append_row(0, add(beta_mean, multiply(beta_err, get_base1(smooth_sd, 1, "smooth_sd", 1)))));
            } else {
                current_statement_begin__ = 204;
                stan::math::assign(beta, append_row(0, add(beta_mean, multiply(beta_err, get_base1(smooth_sd_fixed, 1, "smooth_sd_fixed", 1)))));
            }
            current_statement_begin__ = 205;
            if (as_bool(logical_eq(modelid, 1))) {
                current_statement_begin__ = 206;
                stan::math::assign(coefs, softmax(beta));
            } else {
                current_statement_begin__ = 208;
                stan::model::assign(coefs, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(beta_err, 1, "beta_err", 1)), 
                            "assigning variable coefs");
                current_statement_begin__ = 209;
                stan::model::assign(coefs, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable coefs");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 198;
            size_t beta_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 199;
            size_t coefs_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < coefs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(coefs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: coefs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable coefs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 215;
            validate_non_negative_index("eta_event", "nevent", nevent);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_event(nevent);
            stan::math::initialize(eta_event, DUMMY_VAR__);
            stan::math::fill(eta_event, DUMMY_VAR__);
            current_statement_begin__ = 216;
            validate_non_negative_index("eta_rcens", "nrcens", nrcens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_rcens(nrcens);
            stan::math::initialize(eta_rcens, DUMMY_VAR__);
            stan::math::fill(eta_rcens, DUMMY_VAR__);
            current_statement_begin__ = 217;
            validate_non_negative_index("eta_extern", "nextern", nextern);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_extern(nextern);
            stan::math::initialize(eta_extern, DUMMY_VAR__);
            stan::math::fill(eta_extern, DUMMY_VAR__);
            current_statement_begin__ = 218;
            local_scalar_t__ dummy(DUMMY_VAR__);
            (void) dummy;  // dummy to suppress unused var warning
            stan::math::initialize(dummy, DUMMY_VAR__);
            stan::math::fill(dummy, DUMMY_VAR__);
            current_statement_begin__ = 219;
            local_scalar_t__ cp(DUMMY_VAR__);
            (void) cp;  // dummy to suppress unused var warning
            stan::math::initialize(cp, DUMMY_VAR__);
            stan::math::fill(cp, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("p_ext_stop", "nextern", nextern);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_ext_stop(nextern);
            stan::math::initialize(p_ext_stop, DUMMY_VAR__);
            stan::math::fill(p_ext_stop, DUMMY_VAR__);
            current_statement_begin__ = 221;
            validate_non_negative_index("p_ext_start", "nextern", nextern);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_ext_start(nextern);
            stan::math::initialize(p_ext_start, DUMMY_VAR__);
            stan::math::fill(p_ext_start, DUMMY_VAR__);
            current_statement_begin__ = 222;
            validate_non_negative_index("pcure_event", "nevent", nevent);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pcure_event(nevent);
            stan::math::initialize(pcure_event, DUMMY_VAR__);
            stan::math::fill(pcure_event, DUMMY_VAR__);
            current_statement_begin__ = 223;
            validate_non_negative_index("pcure_rcens", "nrcens", nrcens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pcure_rcens(nrcens);
            stan::math::initialize(pcure_rcens, DUMMY_VAR__);
            stan::math::fill(pcure_rcens, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("pcure_extern", "nextern", nextern);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pcure_extern(nextern);
            stan::math::initialize(pcure_extern, DUMMY_VAR__);
            stan::math::fill(pcure_extern, DUMMY_VAR__);
            current_statement_begin__ = 226;
            if (as_bool(logical_gt(ncovs, 0))) {
                current_statement_begin__ = 228;
                if (as_bool(logical_gt(nevent, 0))) {
                    current_statement_begin__ = 228;
                    stan::math::assign(eta_event, multiply(x_event, loghr));
                }
                current_statement_begin__ = 229;
                if (as_bool(logical_gt(nrcens, 0))) {
                    current_statement_begin__ = 229;
                    stan::math::assign(eta_rcens, multiply(x_rcens, loghr));
                }
                current_statement_begin__ = 230;
                if (as_bool(logical_gt(nextern, 0))) {
                    current_statement_begin__ = 230;
                    stan::math::assign(eta_extern, multiply(x_ext, loghr));
                }
            } else {
                current_statement_begin__ = 232;
                if (as_bool(logical_gt(nevent, 0))) {
                    current_statement_begin__ = 232;
                    stan::math::assign(eta_event, rep_vector(0.0, nevent));
                }
                current_statement_begin__ = 233;
                if (as_bool(logical_gt(nrcens, 0))) {
                    current_statement_begin__ = 233;
                    stan::math::assign(eta_rcens, rep_vector(0.0, nrcens));
                }
                current_statement_begin__ = 234;
                if (as_bool(logical_gt(nextern, 0))) {
                    current_statement_begin__ = 234;
                    stan::math::assign(eta_extern, rep_vector(0.0, nextern));
                }
            }
            current_statement_begin__ = 238;
            if (as_bool(logical_gt(nevent, 0))) {
                current_statement_begin__ = 238;
                stan::math::assign(eta_event, add(eta_event, log_crude_event_rate));
            }
            current_statement_begin__ = 239;
            if (as_bool(logical_gt(nrcens, 0))) {
                current_statement_begin__ = 239;
                stan::math::assign(eta_rcens, add(eta_rcens, log_crude_event_rate));
            }
            current_statement_begin__ = 240;
            if (as_bool(logical_gt(nextern, 0))) {
                current_statement_begin__ = 240;
                stan::math::assign(eta_extern, add(eta_extern, log_crude_event_rate));
            }
            current_statement_begin__ = 243;
            if (as_bool(logical_gt(nevent, 0))) {
                current_statement_begin__ = 243;
                stan::math::assign(eta_event, add(eta_event, get_base1(gamma, 1, "gamma", 1)));
            }
            current_statement_begin__ = 244;
            if (as_bool(logical_gt(nrcens, 0))) {
                current_statement_begin__ = 244;
                stan::math::assign(eta_rcens, add(eta_rcens, get_base1(gamma, 1, "gamma", 1)));
            }
            current_statement_begin__ = 245;
            if (as_bool(logical_gt(nextern, 0))) {
                current_statement_begin__ = 245;
                stan::math::assign(eta_extern, add(eta_extern, get_base1(gamma, 1, "gamma", 1)));
            }
            current_statement_begin__ = 247;
            if (as_bool(cure)) {
                current_statement_begin__ = 247;
                stan::math::assign(cp, get_base1(pcure, 1, "pcure", 1));
            } else {
                current_statement_begin__ = 247;
                stan::math::assign(cp, 0);
            }
            current_statement_begin__ = 248;
            stan::math::assign(pcure_event, rep_vector(cp, nevent));
            current_statement_begin__ = 249;
            stan::math::assign(pcure_rcens, rep_vector(cp, nrcens));
            current_statement_begin__ = 250;
            stan::math::assign(pcure_extern, rep_vector(cp, nextern));
            current_statement_begin__ = 252;
            if (as_bool(logical_gt(ncurecovs, 0))) {
                current_statement_begin__ = 253;
                if (as_bool(logical_gt(nevent, 0))) {
                    current_statement_begin__ = 253;
                    stan::math::assign(pcure_event, inv_logit(add(logit(pcure_event), multiply(xcure_event, logor_cure))));
                }
                current_statement_begin__ = 254;
                if (as_bool(logical_gt(nrcens, 0))) {
                    current_statement_begin__ = 254;
                    stan::math::assign(pcure_rcens, inv_logit(add(logit(pcure_rcens), multiply(xcure_rcens, logor_cure))));
                }
                current_statement_begin__ = 255;
                if (as_bool(logical_gt(nextern, 0))) {
                    current_statement_begin__ = 255;
                    stan::math::assign(pcure_extern, inv_logit(add(logit(pcure_extern), multiply(xcure_ext, logor_cure))));
                }
            }
            current_statement_begin__ = 258;
            if (as_bool(logical_gt(nevent, 0))) {
                current_statement_begin__ = 258;
                lp_accum__.add(log_dens(eta_event, basis_event, coefs, cure, pcure_event, ibasis_event, modelid, pstream__));
            }
            current_statement_begin__ = 259;
            if (as_bool(logical_gt(nrcens, 0))) {
                current_statement_begin__ = 259;
                lp_accum__.add(log_surv(eta_rcens, ibasis_rcens, coefs, cure, pcure_rcens, modelid, pstream__));
            }
            current_statement_begin__ = 261;
            if (as_bool(logical_gt(nextern, 0))) {
                current_statement_begin__ = 262;
                stan::math::assign(p_ext_stop, stan::math::exp(log_surv(eta_extern, ibasis_ext_stop, coefs, cure, pcure_extern, modelid, pstream__)));
                current_statement_begin__ = 263;
                stan::math::assign(p_ext_start, stan::math::exp(log_surv(eta_extern, ibasis_ext_start, coefs, cure, pcure_extern, modelid, pstream__)));
                current_statement_begin__ = 264;
                lp_accum__.add(binomial_log(r_ext, n_ext, elt_divide(p_ext_stop, p_ext_start)));
            }
            current_statement_begin__ = 268;
            stan::math::assign(dummy, loghaz_lp(get_base1(gamma, 1, "gamma", 1), prior_loghaz_dist, get_base1(prior_loghaz, 1, "prior_loghaz", 1), get_base1(prior_loghaz, 2, "prior_loghaz", 1), get_base1(prior_loghaz, 3, "prior_loghaz", 1), lp__, lp_accum__, pstream__));
            current_statement_begin__ = 272;
            stan::math::assign(dummy, loghr_lp(loghr, prior_loghr_dist, prior_loghr_location, prior_loghr_scale, prior_loghr_df, lp__, lp_accum__, pstream__));
            current_statement_begin__ = 276;
            if (as_bool(logical_eq(modelid, 1))) {
                current_statement_begin__ = 277;
                lp_accum__.add(logistic_log<propto__>(beta_err, 0, 1));
            }
            current_statement_begin__ = 281;
            if (as_bool(cure)) {
                current_statement_begin__ = 282;
                lp_accum__.add(beta_log<propto__>(pcure, get_base1(prior_cure, 1, "prior_cure", 1), get_base1(prior_cure, 2, "prior_cure", 1)));
            }
            current_statement_begin__ = 284;
            if (as_bool(logical_gt(ncurecovs, 0))) {
                current_statement_begin__ = 286;
                stan::math::assign(dummy, loghr_lp(logor_cure, prior_logor_cure_dist, prior_logor_cure_location, prior_logor_cure_scale, prior_logor_cure_df, lp__, lp_accum__, pstream__));
            }
            current_statement_begin__ = 290;
            if (as_bool(est_smooth)) {
                current_statement_begin__ = 291;
                lp_accum__.add(gamma_log<propto__>(smooth_sd, get_base1(prior_smooth, 1, "prior_smooth", 1), get_base1(prior_smooth, 2, "prior_smooth", 1)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("loghr");
        names__.push_back("beta_err");
        names__.push_back("smooth_sd");
        names__.push_back("pcure");
        names__.push_back("logor_cure");
        names__.push_back("beta");
        names__.push_back("coefs");
        names__.push_back("alpha");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncovs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nvars - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_smooth);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(cure);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncurecovs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nvars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nvars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_survextrap_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> gamma;
        size_t gamma_d_0_max__ = 1;
        gamma.reserve(gamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
            gamma.push_back(in__.scalar_constrain());
        }
        size_t gamma_k_0_max__ = 1;
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> loghr = in__.vector_constrain(ncovs);
        size_t loghr_j_1_max__ = ncovs;
        for (size_t j_1__ = 0; j_1__ < loghr_j_1_max__; ++j_1__) {
            vars__.push_back(loghr(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_err = in__.vector_constrain((nvars - 1));
        size_t beta_err_j_1_max__ = (nvars - 1);
        for (size_t j_1__ = 0; j_1__ < beta_err_j_1_max__; ++j_1__) {
            vars__.push_back(beta_err(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> smooth_sd = in__.vector_lb_constrain(0, est_smooth);
        size_t smooth_sd_j_1_max__ = est_smooth;
        for (size_t j_1__ = 0; j_1__ < smooth_sd_j_1_max__; ++j_1__) {
            vars__.push_back(smooth_sd(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> pcure = in__.vector_lub_constrain(0, 1, cure);
        size_t pcure_j_1_max__ = cure;
        for (size_t j_1__ = 0; j_1__ < pcure_j_1_max__; ++j_1__) {
            vars__.push_back(pcure(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> logor_cure = in__.vector_constrain(ncurecovs);
        size_t logor_cure_j_1_max__ = ncurecovs;
        for (size_t j_1__ = 0; j_1__ < logor_cure_j_1_max__; ++j_1__) {
            vars__.push_back(logor_cure(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 198;
            validate_non_negative_index("beta", "nvars", nvars);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(nvars);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("coefs", "nvars", nvars);
            Eigen::Matrix<double, Eigen::Dynamic, 1> coefs(nvars);
            stan::math::initialize(coefs, DUMMY_VAR__);
            stan::math::fill(coefs, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 201;
            if (as_bool(est_smooth)) {
                current_statement_begin__ = 202;
                stan::math::assign(beta, append_row(0, add(beta_mean, multiply(beta_err, get_base1(smooth_sd, 1, "smooth_sd", 1)))));
            } else {
                current_statement_begin__ = 204;
                stan::math::assign(beta, append_row(0, add(beta_mean, multiply(beta_err, get_base1(smooth_sd_fixed, 1, "smooth_sd_fixed", 1)))));
            }
            current_statement_begin__ = 205;
            if (as_bool(logical_eq(modelid, 1))) {
                current_statement_begin__ = 206;
                stan::math::assign(coefs, softmax(beta));
            } else {
                current_statement_begin__ = 208;
                stan::model::assign(coefs, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(beta_err, 1, "beta_err", 1)), 
                            "assigning variable coefs");
                current_statement_begin__ = 209;
                stan::model::assign(coefs, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable coefs");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = nvars;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t coefs_j_1_max__ = nvars;
                for (size_t j_1__ = 0; j_1__ < coefs_j_1_max__; ++j_1__) {
                    vars__.push_back(coefs(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 297;
            double alpha;
            (void) alpha;  // dummy to suppress unused var warning
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,(log_crude_event_rate + get_base1(gamma, 1, "gamma", 1)));
            // validate, write generated quantities
            current_statement_begin__ = 297;
            vars__.push_back(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_survextrap";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_k_0_max__ = 1;
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t loghr_j_1_max__ = ncovs;
        for (size_t j_1__ = 0; j_1__ < loghr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "loghr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_err_j_1_max__ = (nvars - 1);
        for (size_t j_1__ = 0; j_1__ < beta_err_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_err" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t smooth_sd_j_1_max__ = est_smooth;
        for (size_t j_1__ = 0; j_1__ < smooth_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "smooth_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pcure_j_1_max__ = cure;
        for (size_t j_1__ = 0; j_1__ < pcure_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pcure" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t logor_cure_j_1_max__ = ncurecovs;
        for (size_t j_1__ = 0; j_1__ < logor_cure_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logor_cure" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t coefs_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < coefs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coefs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_k_0_max__ = 1;
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t loghr_j_1_max__ = ncovs;
        for (size_t j_1__ = 0; j_1__ < loghr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "loghr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_err_j_1_max__ = (nvars - 1);
        for (size_t j_1__ = 0; j_1__ < beta_err_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_err" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t smooth_sd_j_1_max__ = est_smooth;
        for (size_t j_1__ = 0; j_1__ < smooth_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "smooth_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pcure_j_1_max__ = cure;
        for (size_t j_1__ = 0; j_1__ < pcure_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pcure" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t logor_cure_j_1_max__ = ncurecovs;
        for (size_t j_1__ = 0; j_1__ < logor_cure_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logor_cure" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t coefs_j_1_max__ = nvars;
            for (size_t j_1__ = 0; j_1__ < coefs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coefs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_survextrap_namespace::model_survextrap stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
